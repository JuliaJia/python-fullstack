# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-02 03:34
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.SmallIntegerField(choices=[(0, '测试区域'), (1, '研发区域'), (3, '生产区域')])),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixeCapitaldNumber', models.CharField(max_length=128, unique=True, verbose_name='固资编号')),
                ('sn', models.CharField(max_length=128, unique=True, verbose_name='SN序列号')),
                ('deviceName', models.CharField(max_length=128, unique=True, verbose_name='设备名称')),
                ('deviceType', models.CharField(max_length=64, verbose_name='设备型号')),
                ('purchaseDate', models.DateField(blank=True, null=True)),
                ('expiredDate', models.DateField(blank=True, null=True)),
                ('groundingDate', models.DateField(blank=True, null=True)),
                ('enableDate', models.DateField(blank=True, null=True)),
                ('statusName', models.SmallIntegerField(choices=[(0, '运营中'), (1, '上架中'), (2, '故障'), (3, '备用'), (4, '过保'), (5, '报废'), (6, '失联')])),
                ('areaName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.area')),
            ],
        ),
        migrations.CreateModel(
            name='business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='所属业务')),
                ('parent_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='P_unit', to='CMDB.business')),
            ],
        ),
        migrations.CreateModel(
            name='cpu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=64)),
                ('size', models.PositiveIntegerField(verbose_name='核数(个)')),
                ('CPUType', models.CharField(max_length=64, verbose_name='CPU型号')),
                ('slot', models.CharField(max_length=32, verbose_name='插槽')),
                ('sn', models.CharField(max_length=128, unique=True)),
                ('statusName', models.SmallIntegerField(choices=[(0, '使用中'), (1, '出库'), (2, '故障'), (3, '备用'), (4, '过保'), (5, '报废'), (6, '失联')])),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='DataBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostIP', models.GenericIPAddressField(unique=True)),
                ('statusType', models.SmallIntegerField(choices=[(0, '在线'), (1, '准备下线'), (2, '故障')])),
                ('systemName', models.CharField(max_length=128, verbose_name='业务系统')),
                ('VIP', models.GenericIPAddressField(blank=True, null=True, unique=True)),
                ('masterIP', models.GenericIPAddressField(unique=True)),
                ('slaveIP', models.GenericIPAddressField(unique=True)),
                ('masterPort', models.PositiveIntegerField(verbose_name='Master端口')),
                ('slavePort', models.PositiveIntegerField(verbose_name='Slave端口')),
            ],
        ),
        migrations.CreateModel(
            name='department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=64)),
                ('size', models.PositiveIntegerField(verbose_name='容量(GB)')),
                ('diskType', models.CharField(max_length=64, verbose_name='磁盘类型')),
                ('rangNumber', models.PositiveIntegerField(verbose_name='转数（转）')),
                ('slot', models.CharField(max_length=32, verbose_name='盘位')),
                ('sn', models.CharField(max_length=128, unique=True)),
                ('statusName', models.SmallIntegerField(choices=[(0, '使用中'), (1, '出库'), (2, '故障'), (3, '备用'), (4, '过保'), (5, '报废'), (6, '失联')])),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='机房名称')),
                ('admin', models.CharField(max_length=64, verbose_name='机房负责人')),
                ('contact', models.CharField(max_length=128, verbose_name='机房负责人联系方式')),
            ],
        ),
        migrations.CreateModel(
            name='IDCManagementUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='机房管理单元')),
                ('admin', models.CharField(max_length=64, verbose_name='机房管理单元负责人')),
                ('contact', models.CharField(max_length=128, verbose_name='机房管理单元负责人联系方式')),
                ('idc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.IDC')),
            ],
        ),
        migrations.CreateModel(
            name='manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MiddleWare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='实例名')),
                ('hostIP', models.GenericIPAddressField()),
                ('instanceIP', models.GenericIPAddressField(unique=True)),
                ('areaName', models.CharField(max_length=64, verbose_name='网络区域')),
                ('statusType', models.SmallIntegerField(choices=[(0, '在线'), (1, '准备下线'), (2, '故障')])),
                ('systemName', models.CharField(max_length=128, verbose_name='业务系统')),
                ('warName', models.CharField(max_length=128, verbose_name='war包名')),
                ('memSize', models.PositiveIntegerField(verbose_name='内存容量（GB）')),
                ('lineSize', models.PositiveIntegerField(verbose_name='线程数（个）')),
                ('instanceType', models.SmallIntegerField(choices=[(0, 'JBOSS'), (1, 'KAFKA'), (2, 'REDIS')])),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkType', models.SmallIntegerField(choices=[(0, 'NetworkDevice'), (1, 'NetworkLine')])),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='networkArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkArea', models.SmallIntegerField(choices=[(0, 'DCN')])),
            ],
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oobIP', models.GenericIPAddressField(blank=True, null=True)),
                ('loopbackIP', models.GenericIPAddressField(blank=True, null=True)),
                ('deviceType', models.SmallIntegerField(choices=[(0, '路由器'), (1, '交换机'), (2, '防火墙'), (3, '负载均衡')])),
                ('core', models.SmallIntegerField(choices=[(0, '是'), (1, '否')])),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Network')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lineName', models.CharField(max_length=128, verbose_name='链路名称')),
                ('lineType', models.CharField(max_length=128, verbose_name='链路类型')),
                ('lineNumber', models.CharField(max_length=128, unique=True)),
                ('size', models.PositiveIntegerField(verbose_name='带宽（MB）')),
                ('ipCount', models.PositiveIntegerField(verbose_name='公网IP个数（个）')),
                ('wanIP', models.GenericIPAddressField(blank=True, null=True)),
                ('lanIP', models.GenericIPAddressField(blank=True, null=True)),
                ('fromName', models.CharField(max_length=128, verbose_name='源')),
                ('toName', models.CharField(max_length=128, verbose_name='目的')),
                ('portName', models.PositiveIntegerField(blank=True, null=True, verbose_name='端口')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Network')),
            ],
        ),
        migrations.CreateModel(
            name='os',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='OS名称')),
                ('version', models.SmallIntegerField(choices=[(0, '测试用'), (1, '线上用'), (2, 'Bug存量'), (3, '维护中'), (4, '弃用')])),
            ],
        ),
        migrations.CreateModel(
            name='owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='机架')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.IDCManagementUnit')),
            ],
        ),
        migrations.CreateModel(
            name='ram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=64)),
                ('size', models.PositiveIntegerField(verbose_name='容量(GB)')),
                ('ramType', models.CharField(max_length=64, verbose_name='RAM型号')),
                ('slot', models.CharField(max_length=32, verbose_name='插槽')),
                ('sn', models.CharField(max_length=128, unique=True)),
                ('statusName', models.SmallIntegerField(choices=[(0, '使用中'), (1, '出库'), (2, '故障'), (3, '备用'), (4, '过保'), (5, '报废'), (6, '失联')])),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oobIP', models.GenericIPAddressField(blank=True, null=True)),
                ('hostIP', models.GenericIPAddressField(blank=True, null=True)),
                ('wanIP', models.GenericIPAddressField(blank=True, null=True)),
                ('deviceType', models.SmallIntegerField(choices=[(0, '虚拟机'), (1, '物理机')])),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
                ('osName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.os')),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceType', models.SmallIntegerField(choices=[(0, 'MiddleWare'), (1, 'DataBase')])),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='networkdevice',
            name='osName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.os'),
        ),
        migrations.AddField(
            model_name='middleware',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Services'),
        ),
        migrations.AddField(
            model_name='disk',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.manufacturer'),
        ),
        migrations.AddField(
            model_name='database',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.Services'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.manufacturer'),
        ),
        migrations.AddField(
            model_name='asset',
            name='businessName',
            field=models.ManyToManyField(blank=True, to='CMDB.business'),
        ),
        migrations.AddField(
            model_name='asset',
            name='departmentName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.department'),
        ),
        migrations.AddField(
            model_name='asset',
            name='manufacturerName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.manufacturer'),
        ),
        migrations.AddField(
            model_name='asset',
            name='networkAreaName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.networkArea'),
        ),
        migrations.AddField(
            model_name='asset',
            name='ownerName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.owner'),
        ),
        migrations.AddField(
            model_name='asset',
            name='rackName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CMDB.rack'),
        ),
        migrations.AlterUniqueTogether(
            name='ram',
            unique_together=set([('asset', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='rack',
            unique_together=set([('unit', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='idcmanagementunit',
            unique_together=set([('idc', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='disk',
            unique_together=set([('asset', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='cpu',
            unique_together=set([('asset', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='business',
            unique_together=set([('parent_unit', 'name')]),
        ),
    ]
